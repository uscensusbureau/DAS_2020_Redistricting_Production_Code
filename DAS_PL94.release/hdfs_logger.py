import subprocess
import os
import datetime
import time
import numpy as np

"""
'Logger' intended for real-time logging from inside executors to hdfs. May be slow, so use sparingly!

Looks at CONFIG["LOGS"]["hdfs_logfile"] for hdfs logfile path. Example (note the *3* fwd slashes) might be:

hdfs:///tmp/logfile.txt

Can be viewed easily while getting populated with:

hdfs dfs -cat hdfs://tmp/logfile.txt &> current_contents_of_logfile

and then opening the logfile locally.

WARNING: since HDFS is Write Once Read Many, some messages generated by this logger seem to be lost when parallel
appends occur to the log file...

WARNING: to force all messages to appear in log file, added wait-retry behavior. Will be *very slow*. Use *sparingly*.

WARNING: does not currently like to see ' (or presumably ") in logged messages.
"""

def setup(config):
    msg = str(datetime.datetime.now()) + " "*10 + "<<<<<<<<<<<< Beginning hdfs logfile... >>>>>>>>>>"
    if config.has_section("LOGS") and config.has_option("LOGS","hdfs_logfile"):
        logPath = config["LOGS"]["hdfs_logfile"]

        try:
            verbose = True if config["LOGS"]["verbose"] == "True" else False
            overwrite = bool(config["LOGS"]["hdfs_log_overwrite"])

            if overwrite:
                cmd = "hdfs dfs -rm " + logPath
                hdfs_rm_output = os.system(cmd)
                if verbose and int(hdfs_rm_output) != 0:
                    print("hdfs logger rm said something: " + str(hdfs_rm_output))

            cmd = "echo \"" + msg + "\" | hdfs dfs -appendToFile - " + logPath
            hdfs_append_output = os.system(cmd)
            if verbose and int(hdfs_append_output) != 0:
                print("hdfsLog append (first line)  encountered a problem: " + str(hdfs_append_output))

        except subprocess.CalledProcessError as e:
            print("hdfs logger failed to write >> " + msg + " << due to error " + e.output)

def hdfsLog(config, msg):
    msg = str(datetime.datetime.now()) + " "*10 + msg
    succeeded = False
    maxAttempts = 10
    attempts = 0
    rand_wait_base = np.random.uniform(1,3)

    if config.has_section("LOGS") and config.has_option("LOGS","hdfs_logfile"):
        logPath = config["LOGS"]["hdfs_logfile"]
        try:
            while not succeeded and attempts < maxAttempts:
                verbose = True if config["LOGS"]["verbose"] == "True" else False
                cmd = "echo \"" + msg + " (hdfsLog attempt " + str(attempts)  + ")" + "\" | hdfs dfs -appendToFile - " + logPath
                hdfs_append_output = os.system(cmd)
                if verbose and int(hdfs_append_output) != 0:
                    attempts += 1
                    print(f"hdfsLog append encountered a problem on try # {attempts}: " + str(hdfs_append_output))
                    rand_wait = 1.3**(attempts-1)*rand_wait_base
                    time.sleep(rand_wait/1000)
                else:
                    succeeded = True
        except subprocess.CalledProcessError as e:
            print("hdfs logger failed to write >> " + msg + " << due to error " + e.output)
