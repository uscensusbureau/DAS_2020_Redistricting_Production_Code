#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This file was automatically generated by census_etl/spec_scanner.py on Thu Sep 24 09:39:22 2020
# Command line: census_etl/spec_scanner.py mdf/2020 Public Law 94 171 Microdata Detail File Specification v2_delivered 09222020.docx --output_parser mdf_validator_classes.py --tablenames MDF_Person MDF_Unit

# Automatically generated on Thu Sep 24 09:39:22 2020 by C:\cygwin64\home\will0555\micah\etl_2020\ctools\schema\table.py
from programs.writer.cef_2020.mdf_validator_classes import MDF_Unit, MDF_Person, MDF_Person_validator, MDF_Unit_validator


def leftpad(x,width):
    return '0'*(width-len(str(x)))+str(x)

def between(a,b,c,width):
    if len(b) > width:
        return False
    if '.' in a or '.' in b or '.' in c:
        try:
            return float(a) <= float(b) <= float(c)
        except ValueError:
            pass  # tries to return a float but might have weird input like 1.1.0 which will be compared traditionally instead
    b = b.replace(' ', '0')
    return leftpad(a,width) <= leftpad(b,width) <= leftpad(c,width)


def safe_int(i):
    try:
        return int(i)
    except (TypeError, ValueError) as e:
        return None

def safe_float(i):
    try:
        return float(i)
    except (TypeError, ValueError) as e:
        return None

def safe_str(i):
    try:
        return str(i)
    except (TypeError, ValueError) as e:
        return None


class MDF_Person_validator_nonstandard_geocodes(MDF_Person_validator):
    @classmethod
    def is_valid_TABBLKST(self,x):
        """2020 Tabulation State (FIPS)"""
        if x is None or x == "None":
            return False
        return True
        # return (between('01',x,'02',2)) or (leftpad(x,2)==leftpad('72',2)) or (between('04',x,'06',2)) or (between('08',x,'13',2)) or (between('44',x,'51',2)) or (between('15',x,'42',2)) or (between('53',x,'56',2))
    @classmethod
    def is_valid_TABBLKCOU(self,x):
        """2020 Tabulation County (FIPS)"""
        if x is None or x == "None":
            return False
        return True
        # return (between('001',x,'840',3))
    @classmethod
    def is_valid_TABTRACTCE(self,x):
        """2020 Tabulation Census Tract"""
        if x is None or x == "None":
            return False
        return True
        # return (between('000100',x,'998999',6))
    @classmethod
    def is_valid_TABBLKGRPCE(self,x):
        """2020 Census Block Group"""
        if x is None or x == "None":
            return False
        return True
        # return (between('0',x,'9',1))
    @classmethod
    def is_valid_TABBLK(self,x):
        """2020 Block Number"""
        if x is None or x == "None":
            return False
        return True
        # return (between('0001',x,'9999',4))


class MDF_Person_nonstandard_geocodes(MDF_Person):
    def validate(self):
        """Return True if the object data validates"""
        if not MDF_Person_validator.is_valid_SCHEMA_TYPE_CODE(self.SCHEMA_TYPE_CODE): return False
        if not MDF_Person_validator.is_valid_SCHEMA_BUILD_ID(self.SCHEMA_BUILD_ID): return False
        if not MDF_Person_validator_nonstandard_geocodes.is_valid_TABBLKST(self.TABBLKST): return False
        if not MDF_Person_validator_nonstandard_geocodes.is_valid_TABBLKCOU(self.TABBLKCOU): return False
        if not MDF_Person_validator_nonstandard_geocodes.is_valid_TABTRACTCE(self.TABTRACTCE): return False
        if not MDF_Person_validator_nonstandard_geocodes.is_valid_TABBLKGRPCE(self.TABBLKGRPCE): return False
        if not MDF_Person_validator_nonstandard_geocodes.is_valid_TABBLK(self.TABBLK): return False
        if not MDF_Person_validator.is_valid_EPNUM(self.EPNUM): return False
        if not MDF_Person_validator.is_valid_RTYPE(self.RTYPE): return False
        if not MDF_Person_validator.is_valid_GQTYPE(self.GQTYPE): return False
        if not MDF_Person_validator.is_valid_RELSHIP(self.RELSHIP): return False
        if not MDF_Person_validator.is_valid_QSEX(self.QSEX): return False
        if not MDF_Person_validator.is_valid_QAGE(self.QAGE): return False
        if not MDF_Person_validator.is_valid_CENHISP(self.CENHISP): return False
        if not MDF_Person_validator.is_valid_CENRACE(self.CENRACE): return False
        if not MDF_Person_validator.is_valid_LIVE_ALONE(self.LIVE_ALONE): return False
        return True

    def validate_reason(self):
        reason=[]
        if not MDF_Person_validator.is_valid_SCHEMA_TYPE_CODE(self.SCHEMA_TYPE_CODE): reason.append('SCHEMA_TYPE_CODE ('+str(self.SCHEMA_TYPE_CODE)+') out of range (MPD-MPD)')
        if not MDF_Person_validator.is_valid_SCHEMA_BUILD_ID(self.SCHEMA_BUILD_ID): reason.append('SCHEMA_BUILD_ID ('+str(self.SCHEMA_BUILD_ID)+') out of range ()')
        if not MDF_Person_validator_nonstandard_geocodes.is_valid_TABBLKST(self.TABBLKST): reason.append('TABBLKST ('+str(self.TABBLKST)+') out of range (01-02, 72-72, 04-06, 08-13, 44-51, 15-42, 53-56)')
        if not MDF_Person_validator_nonstandard_geocodes.is_valid_TABBLKCOU(self.TABBLKCOU): reason.append('TABBLKCOU ('+str(self.TABBLKCOU)+') out of range (001-840)')
        if not MDF_Person_validator_nonstandard_geocodes.is_valid_TABTRACTCE(self.TABTRACTCE): reason.append('TABTRACTCE ('+str(self.TABTRACTCE)+') out of range (000100-998999)')
        if not MDF_Person_validator_nonstandard_geocodes.is_valid_TABBLKGRPCE(self.TABBLKGRPCE): reason.append('TABBLKGRPCE ('+str(self.TABBLKGRPCE)+') out of range (0-9)')
        if not MDF_Person_validator_nonstandard_geocodes.is_valid_TABBLK(self.TABBLK): reason.append('TABBLK ('+str(self.TABBLK)+') out of range (0001-9999)')
        if not MDF_Person_validator.is_valid_EPNUM(self.EPNUM): reason.append('EPNUM ('+str(self.EPNUM)+') out of range (0-999999999)')
        if not MDF_Person_validator.is_valid_RTYPE(self.RTYPE): reason.append('RTYPE ('+str(self.RTYPE)+') out of range (5-5, 3-3)')
        if not MDF_Person_validator.is_valid_GQTYPE(self.GQTYPE): reason.append('GQTYPE ('+str(self.GQTYPE)+') out of range (106-106, 103-103, 102-102, 104-104, 602-602, 105-105, 301-301, 401-401, 402-402, 403-403, 203-203, 997-997, 501-501, 601-601, 706-706, 801-801, 201-201, 704-704, 701-701, 904-904, 405-405, 802-802, 202-202, 903-903, 900-900, 901-901, 101-101, 000-000, 404-404)')
        if not MDF_Person_validator.is_valid_RELSHIP(self.RELSHIP): reason.append('RELSHIP ('+str(self.RELSHIP)+') out of range (25-25, 32-32, 23-23, 20-20, 26-26, 30-30, 34-34, 37-37, 33-33, 36-36, 24-24, 38-38, 21-21, 35-35, 31-31, 22-22, 29-29, 28-28, 27-27)')
        if not MDF_Person_validator.is_valid_QSEX(self.QSEX): reason.append('QSEX ('+str(self.QSEX)+') out of range (2-2, 1-1)')
        if not MDF_Person_validator.is_valid_QAGE(self.QAGE): reason.append('QAGE ('+str(self.QAGE)+') out of range (0-115)')
        if not MDF_Person_validator.is_valid_CENHISP(self.CENHISP): reason.append('CENHISP ('+str(self.CENHISP)+') out of range (2-2, 1-1)')
        if not MDF_Person_validator.is_valid_CENRACE(self.CENRACE): reason.append('CENRACE ('+str(self.CENRACE)+') out of range (14-14, 16-16, 09-09, 11-11, 01-01, 12-12, 20-20, 17-17, 06-06, 15-15, 26-26, 30-30, 36-36, 45-45, 46-46, 55-55, 61-61, 18-18, 27-27, 03-03, 10-10, 13-13, 23-23, 54-54, 07-07, 33-33, 53-53, 22-22, 31-31, 41-41, 48-48, 50-50, 25-25, 28-28, 29-29, 32-32, 34-34, 52-52, 59-59, 02-02, 47-47, 37-37, 19-19, 40-40, 08-08, 21-21, 56-56, 39-39, 38-38, 44-44, 42-42, 49-49, 57-57, 63-63, 51-51, 04-04, 24-24, 58-58, 60-60, 62-62, 35-35, 05-05, 43-43)')
        if not MDF_Person_validator.is_valid_LIVE_ALONE(self.LIVE_ALONE): reason.append('LIVE_ALONE ('+str(self.LIVE_ALONE)+') out of range (2-2, 0-0, 1-1)')
        return ', '.join(reason)


    @staticmethod
    def parse_line(line):
        # Read a line and return it as a dictionary.
        inst: MDF_Person_nonstandard_geocodes = MDF_Person_nonstandard_geocodes()
        inst.parse_column_specified(line)
        assert inst.validate(), f'A line is invalid!! line: {line}, validate_reason: {inst.validate_reason()}'
        row = inst.SparkSQLRow()
        return row

    @staticmethod
    def parse_piped_line(line):
        # Read a pipe-delimited line and return it as a dictionary.
        inst: MDF_Person_nonstandard_geocodes = MDF_Person_nonstandard_geocodes()
        inst.parse_pipe_delimited(line)
        assert inst.validate(), f'A line is invalid!! line: {line}, validate_reason: {inst.validate_reason()}'
        row = inst.SparkSQLRow()
        return row



class MDF_Unit_validator_nonstandard_geocodes(MDF_Unit_validator):
    @classmethod
    def is_valid_TABBLKST(self,x):
        """2020 Tabulation State (FIPS)"""
        if x is None or x == "None":
            return False
        return True
        # return (between('01',x,'02',2)) or (leftpad(x,2)==leftpad('72',2)) or (between('04',x,'06',2)) or (between('08',x,'13',2)) or (between('44',x,'51',2)) or (between('15',x,'42',2)) or (between('53',x,'56',2))
    @classmethod
    def is_valid_TABBLKCOU(self,x):
        """2020 Tabulation County (FIPS)"""
        if x is None or x == "None":
            return False
        return True
        # return (between('001',x,'840',3))
    @classmethod
    def is_valid_TABTRACTCE(self,x):
        """2020 Tabulation Census Tract"""
        if x is None or x == "None":
            return False
        return True
        # return (between('000100',x,'998999',6))
    @classmethod
    def is_valid_TABBLKGRPCE(self,x):
        """2020 Census Block Group"""
        if x is None or x == "None":
            return False
        return True
        # return (between('0',x,'9',1))
    @classmethod
    def is_valid_TABBLK(self,x):
        """2020 Block Number"""
        if x is None or x == "None":
            return False
        return True
        # return (between('0001',x,'9999',4))

class MDF_Unit_nonstandard_geocodes(MDF_Unit):
    def validate(self):
        """Return True if the object data validates"""
        if not MDF_Unit_validator.is_valid_SCHEMA_TYPE_CODE(self.SCHEMA_TYPE_CODE): return False
        if not MDF_Unit_validator.is_valid_SCHEMA_BUILD_ID(self.SCHEMA_BUILD_ID): return False
        if not MDF_Unit_validator_nonstandard_geocodes.is_valid_TABBLKST(self.TABBLKST): return False
        if not MDF_Unit_validator_nonstandard_geocodes.is_valid_TABBLKCOU(self.TABBLKCOU): return False
        if not MDF_Unit_validator_nonstandard_geocodes.is_valid_TABTRACTCE(self.TABTRACTCE): return False
        if not MDF_Unit_validator_nonstandard_geocodes.is_valid_TABBLKGRPCE(self.TABBLKGRPCE): return False
        if not MDF_Unit_validator_nonstandard_geocodes.is_valid_TABBLK(self.TABBLK): return False
        if not MDF_Unit_validator.is_valid_RTYPE(self.RTYPE): return False
        if not MDF_Unit_validator.is_valid_GQTYPE(self.GQTYPE): return False
        if not MDF_Unit_validator.is_valid_TEN(self.TEN): return False
        if not MDF_Unit_validator.is_valid_VACS(self.VACS): return False
        if not MDF_Unit_validator.is_valid_HHSIZE(self.HHSIZE): return False
        if not MDF_Unit_validator.is_valid_HHT(self.HHT): return False
        if not MDF_Unit_validator.is_valid_HHT2(self.HHT2): return False
        if not MDF_Unit_validator.is_valid_CPLT(self.CPLT): return False
        if not MDF_Unit_validator.is_valid_UPART(self.UPART): return False
        if not MDF_Unit_validator.is_valid_MULTG(self.MULTG): return False
        if not MDF_Unit_validator.is_valid_THHLDRAGE(self.THHLDRAGE): return False
        if not MDF_Unit_validator.is_valid_THHSPAN(self.THHSPAN): return False
        if not MDF_Unit_validator.is_valid_THHRACE(self.THHRACE): return False
        if not MDF_Unit_validator.is_valid_PAOC(self.PAOC): return False
        if not MDF_Unit_validator.is_valid_TP18(self.TP18): return False
        if not MDF_Unit_validator.is_valid_TP60(self.TP60): return False
        if not MDF_Unit_validator.is_valid_TP65(self.TP65): return False
        if not MDF_Unit_validator.is_valid_TP75(self.TP75): return False
        if not MDF_Unit_validator.is_valid_PAC(self.PAC): return False
        if not MDF_Unit_validator.is_valid_HHSEX(self.HHSEX): return False
        return True

    def validate_reason(self):
        reason=[]
        if not MDF_Unit_validator.is_valid_SCHEMA_TYPE_CODE(self.SCHEMA_TYPE_CODE): reason.append('SCHEMA_TYPE_CODE ('+str(self.SCHEMA_TYPE_CODE)+') out of range (MUD-MUD)')
        if not MDF_Unit_validator.is_valid_SCHEMA_BUILD_ID(self.SCHEMA_BUILD_ID): reason.append('SCHEMA_BUILD_ID ('+str(self.SCHEMA_BUILD_ID)+') out of range ()')
        if not MDF_Unit_validator_nonstandard_geocodes.is_valid_TABBLKST(self.TABBLKST): reason.append('TABBLKST ('+str(self.TABBLKST)+') out of range (01-02, 72-72, 04-06, 08-13, 44-51, 15-42, 53-56)')
        if not MDF_Unit_validator_nonstandard_geocodes.is_valid_TABBLKCOU(self.TABBLKCOU): reason.append('TABBLKCOU ('+str(self.TABBLKCOU)+') out of range (001-840)')
        if not MDF_Unit_validator_nonstandard_geocodes.is_valid_TABTRACTCE(self.TABTRACTCE): reason.append('TABTRACTCE ('+str(self.TABTRACTCE)+') out of range (000100-998999)')
        if not MDF_Unit_validator_nonstandard_geocodes.is_valid_TABBLKGRPCE(self.TABBLKGRPCE): reason.append('TABBLKGRPCE ('+str(self.TABBLKGRPCE)+') out of range (0-9)')
        if not MDF_Unit_validator_nonstandard_geocodes.is_valid_TABBLK(self.TABBLK): reason.append('TABBLK ('+str(self.TABBLK)+') out of range (0001-9999)')
        if not MDF_Unit_validator.is_valid_RTYPE(self.RTYPE): reason.append('RTYPE ('+str(self.RTYPE)+') out of range (2-2, 4-4)')
        if not MDF_Unit_validator.is_valid_GQTYPE(self.GQTYPE): reason.append('GQTYPE ('+str(self.GQTYPE)+') out of range (106-106, 103-103, 102-102, 104-104, 602-602, 105-105, 301-301, 401-401, 402-402, 403-403, 203-203, 997-997, 501-501, 601-601, 706-706, 801-801, 201-201, 704-704, 701-701, 904-904, 405-405, 802-802, 202-202, 903-903, 900-900, 901-901, 101-101, 000-000, 404-404)')
        if not MDF_Unit_validator.is_valid_TEN(self.TEN): reason.append('TEN ('+str(self.TEN)+') out of range (1-1, 3-3, 2-2, 0-0, 4-4)')
        if not MDF_Unit_validator.is_valid_VACS(self.VACS): reason.append('VACS ('+str(self.VACS)+') out of range (7-7, 1-1, 5-5, 3-3, 6-6, 2-2, 0-0, 4-4)')
        if not MDF_Unit_validator.is_valid_HHSIZE(self.HHSIZE): reason.append('HHSIZE ('+str(self.HHSIZE)+') out of range (7-7, 1-1, 5-5, 3-3, 6-6, 2-2, 0-0, 4-4)')
        if not MDF_Unit_validator.is_valid_HHT(self.HHT): reason.append('HHT ('+str(self.HHT)+') out of range (7-7, 1-1, 5-5, 3-3, 6-6, 2-2, 0-0, 4-4)')
        if not MDF_Unit_validator.is_valid_HHT2(self.HHT2): reason.append('HHT2 ('+str(self.HHT2)+') out of range (02-02, 03-03, 09-09, 01-01, 00-00, 10-10, 11-11, 06-06, 07-07, 04-04, 12-12, 08-08, 05-05)')
        if not MDF_Unit_validator.is_valid_CPLT(self.CPLT): reason.append('CPLT ('+str(self.CPLT)+') out of range (1-1, 5-5, 3-3, 2-2, 0-0, 4-4)')
        if not MDF_Unit_validator.is_valid_UPART(self.UPART): reason.append('UPART ('+str(self.UPART)+') out of range (1-1, 5-5, 3-3, 2-2, 0-0, 4-4)')
        if not MDF_Unit_validator.is_valid_MULTG(self.MULTG): reason.append('MULTG ('+str(self.MULTG)+') out of range (2-2, 0-0, 1-1)')
        if not MDF_Unit_validator.is_valid_THHLDRAGE(self.THHLDRAGE): reason.append('THHLDRAGE ('+str(self.THHLDRAGE)+') out of range (7-7, 1-1, 5-5, 3-3, 6-6, 8-8, 9-9, 2-2, 0-0, 4-4)')
        if not MDF_Unit_validator.is_valid_THHSPAN(self.THHSPAN): reason.append('THHSPAN ('+str(self.THHSPAN)+') out of range (2-2, 0-0, 1-1)')
        if not MDF_Unit_validator.is_valid_THHRACE(self.THHRACE): reason.append('THHRACE ('+str(self.THHRACE)+') out of range (02-02, 03-03, 01-01, 00-00, 06-06, 07-07, 04-04, 05-05)')
        if not MDF_Unit_validator.is_valid_PAOC(self.PAOC): reason.append('PAOC ('+str(self.PAOC)+') out of range (1-1, 3-3, 2-2, 0-0, 4-4)')
        if not MDF_Unit_validator.is_valid_TP18(self.TP18): reason.append('TP18 ('+str(self.TP18)+') out of range (0-0, 1-1)')
        if not MDF_Unit_validator.is_valid_TP60(self.TP60): reason.append('TP60 ('+str(self.TP60)+') out of range (0-0, 1-1)')
        if not MDF_Unit_validator.is_valid_TP65(self.TP65): reason.append('TP65 ('+str(self.TP65)+') out of range (0-0, 1-1)')
        if not MDF_Unit_validator.is_valid_TP75(self.TP75): reason.append('TP75 ('+str(self.TP75)+') out of range (0-0, 1-1)')
        if not MDF_Unit_validator.is_valid_PAC(self.PAC): reason.append('PAC ('+str(self.PAC)+') out of range (1-1, 3-3, 2-2, 0-0, 4-4)')
        if not MDF_Unit_validator.is_valid_HHSEX(self.HHSEX): reason.append('HHSEX ('+str(self.HHSEX)+') out of range (2-2, 0-0, 1-1)')
        return ', '.join(reason)

    @staticmethod
    def parse_line(line):
        # Read a line and return it as a dictionary.
        inst: MDF_Unit_nonstandard_geocodes = MDF_Unit_nonstandard_geocodes()
        inst.parse_column_specified(line)
        assert inst.validate(), f'A line is invalid!! line: {line}, validate_reason: {inst.validate_reason()}'
        row = inst.SparkSQLRow()
        return row

    @staticmethod
    def parse_piped_line(line):
        # Read a pipe-delimited line and return it as a dictionary.
        inst: MDF_Unit_nonstandard_geocodes = MDF_Unit_nonstandard_geocodes()
        inst.parse_pipe_delimited(line)
        assert inst.validate(), f'A line is invalid!! line: {line}, validate_reason: {inst.validate_reason()}'
        row = inst.SparkSQLRow()
        return row



SPEC_CLASS_OBJECTS = [MDF_Person_nonstandard_geocodes(),MDF_Unit_nonstandard_geocodes()]
null = None
SPEC_DICT = {"tables": {"MDF_Person": {"name": "MDF_Person", "variables": [{"name": "SCHEMA_TYPE_CODE", "vtype": "CHAR", "position": "1", "desc": "Schema Type Code", "column": null, "width": 3, "ranges": [{"a": "MPD", "b": "MPD"}]}, {"name": "SCHEMA_BUILD_ID", "vtype": "CHAR", "position": "2", "desc": "Schema Build ID", "column": null, "width": 5, "ranges": []}, {"name": "TABBLKST", "vtype": "CHAR", "position": "3", "desc": "2020 Tabulation State (FIPS)", "column": null, "width": 2, "ranges": [{"a": "01", "b": "02"}, {"a": "72", "b": "72"}, {"a": "04", "b": "06"}, {"a": "08", "b": "13"}, {"a": "44", "b": "51"}, {"a": "15", "b": "42"}, {"a": "53", "b": "56"}]}, {"name": "TABBLKCOU", "vtype": "CHAR", "position": "4", "desc": "2020 Tabulation County (FIPS)", "column": null, "width": 3, "ranges": [{"a": "001", "b": "840"}]}, {"name": "TABTRACTCE", "vtype": "CHAR", "position": "5", "desc": "2020 Tabulation Census Tract", "column": null, "width": 6, "ranges": [{"a": "000100", "b": "998999"}]}, {"name": "TABBLKGRPCE", "vtype": "CHAR", "position": "6", "desc": "2020 Census Block Group", "column": null, "width": 1, "ranges": [{"a": "0", "b": "9"}]}, {"name": "TABBLK", "vtype": "CHAR", "position": "7", "desc": "2020 Block Number", "column": null, "width": 4, "ranges": [{"a": "0001", "b": "9999"}]}, {"name": "EPNUM", "vtype": "INT", "position": "8", "desc": "Privacy Edited Person Number", "column": null, "width": 9, "ranges": [{"a": "0", "b": "999999999"}]}, {"name": "RTYPE", "vtype": "CHAR", "position": "9", "desc": "Record Type", "column": null, "width": 1, "ranges": [{"a": "5", "b": "5"}, {"a": "3", "b": "3"}]}, {"name": "GQTYPE_PL", "vtype": "CHAR", "position": "10", "desc": "Group Quarters Type", "column": null, "width": 1, "ranges": [{"a": "1", "b": "1"}, {"a": "4", "b": "4"}, {"a": "3", "b": "3"}, {"a": "5", "b": "5"}, {"a": "2", "b": "2"}, {"a": "7", "b": "7"}, {"a": "0", "b": "0"}, {"a": "6", "b": "6"}]}, {"name": "VOTING_AGE", "vtype": "CHAR", "position": "11", "desc": "Voting Age", "column": null, "width": 1, "ranges": [{"a": "1", "b": "1"}, {"a": "2", "b": "2"}]}, {"name": "CENHISP", "vtype": "CHAR", "position": "12", "desc": "Hispanic Origin", "column": null, "width": 1, "ranges": [{"a": "1", "b": "1"}, {"a": "2", "b": "2"}]}, {"name": "CENRACE", "vtype": "CHAR", "position": "13", "desc": "Census Race", "column": null, "width": 2, "ranges": [{"a": "04", "b": "04"}, {"a": "17", "b": "17"}, {"a": "19", "b": "19"}, {"a": "23", "b": "23"}, {"a": "20", "b": "20"}, {"a": "13", "b": "13"}, {"a": "56", "b": "56"}, {"a": "49", "b": "49"}, {"a": "24", "b": "24"}, {"a": "01", "b": "01"}, {"a": "38", "b": "38"}, {"a": "48", "b": "48"}, {"a": "03", "b": "03"}, {"a": "54", "b": "54"}, {"a": "14", "b": "14"}, {"a": "18", "b": "18"}, {"a": "33", "b": "33"}, {"a": "35", "b": "35"}, {"a": "28", "b": "28"}, {"a": "43", "b": "43"}, {"a": "21", "b": "21"}, {"a": "36", "b": "36"}, {"a": "08", "b": "08"}, {"a": "26", "b": "26"}, {"a": "29", "b": "29"}, {"a": "32", "b": "32"}, {"a": "06", "b": "06"}, {"a": "34", "b": "34"}, {"a": "15", "b": "15"}, {"a": "40", "b": "40"}, {"a": "45", "b": "45"}, {"a": "61", "b": "61"}, {"a": "62", "b": "62"}, {"a": "51", "b": "51"}, {"a": "59", "b": "59"}, {"a": "52", "b": "52"}, {"a": "02", "b": "02"}, {"a": "42", "b": "42"}, {"a": "46", "b": "46"}, {"a": "47", "b": "47"}, {"a": "50", "b": "50"}, {"a": "09", "b": "09"}, {"a": "30", "b": "30"}, {"a": "41", "b": "41"}, {"a": "16", "b": "16"}, {"a": "44", "b": "44"}, {"a": "58", "b": "58"}, {"a": "53", "b": "53"}, {"a": "05", "b": "05"}, {"a": "55", "b": "55"}, {"a": "12", "b": "12"}, {"a": "39", "b": "39"}, {"a": "07", "b": "07"}, {"a": "57", "b": "57"}, {"a": "31", "b": "31"}, {"a": "10", "b": "10"}, {"a": "22", "b": "22"}, {"a": "60", "b": "60"}, {"a": "25", "b": "25"}, {"a": "63", "b": "63"}, {"a": "11", "b": "11"}, {"a": "27", "b": "27"}, {"a": "37", "b": "37"}]}]}, "MDF_Unit": {"name": "MDF_Unit", "variables": [{"name": "SCHEMA_TYPE_CODE", "vtype": "CHAR", "position": "1", "desc": "Schema Type Code", "column": null, "width": 3, "ranges": [{"a": "MUD", "b": "MUD"}]}, {"name": "SCHEMA_BUILD_ID", "vtype": "CHAR", "position": "2", "desc": "Schema Build ID", "column": null, "width": 5, "ranges": []}, {"name": "TABBLKST", "vtype": "CHAR", "position": "3", "desc": "2020 Tabulation State (FIPS)", "column": null, "width": 2, "ranges": [{"a": "01", "b": "02"}, {"a": "72", "b": "72"}, {"a": "04", "b": "06"}, {"a": "08", "b": "13"}, {"a": "44", "b": "51"}, {"a": "15", "b": "42"}, {"a": "53", "b": "56"}]}, {"name": "TABBLKCOU", "vtype": "CHAR", "position": "4", "desc": "2020 Tabulation County (FIPS)", "column": null, "width": 3, "ranges": [{"a": "001", "b": "840"}]}, {"name": "TABTRACTCE", "vtype": "CHAR", "position": "5", "desc": "2020 Tabulation Census Tract", "column": null, "width": 6, "ranges": [{"a": "000100", "b": "998999"}]}, {"name": "TABBLKGRPCE", "vtype": "CHAR", "position": "6", "desc": "2020 Census Block Group", "column": null, "width": 1, "ranges": [{"a": "0", "b": "9"}]}, {"name": "TABBLK", "vtype": "CHAR", "position": "7", "desc": "2020 Block Number", "column": null, "width": 4, "ranges": [{"a": "0001", "b": "9999"}]}, {"name": "RTYPE", "vtype": "CHAR", "position": "8", "desc": "Record Type", "column": null, "width": 1, "ranges": [{"a": "2", "b": "2"}, {"a": "4", "b": "4"}]}, {"name": "HH_STATUS", "vtype": "CHAR", "position": "9", "desc": "Occupancy Status", "column": null, "width": 1, "ranges": [{"a": "0", "b": "0"}, {"a": "1", "b": "1"}, {"a": "2", "b": "2"}]}]}}}
